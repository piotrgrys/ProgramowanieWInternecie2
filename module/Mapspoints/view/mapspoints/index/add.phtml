<?php
$this->headScript()->appendFile(
    'https://maps.googleapis.com/maps/api/js?key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg&callback=initMap',
    'text/javascript',
    ['async' => true, 'defer' => true]
);
$this->headScript()->appendFile(
    'https://polyfill.io/v3/polyfill.min.js?features=default',
    'text/javascript',
    ['async' => true, 'defer' => true]
);
?>

<script>
    let map;
    let marker;
    let geocoder;
    let responseDiv;
    let response;

    function initMap() {
        const myOptions ={
            zoom: 8,
            center: { lat: -34.397, lng: 150.644 },
            mapTypeControl: false,
        } 
        map = new google.maps.Map(document.getElementById("map"),myOptions);
        geocoder = new google.maps.Geocoder();

        const inputText = document.createElement("input");

        inputText.type = "text";
        inputText.placeholder = "Enter a location";

        const submitButton = document.createElement("input");

        submitButton.type = "button";
        submitButton.value = "Geocode";
        submitButton.classList.add("button", "button-primary");

        const clearButton = document.createElement("input");

        clearButton.type = "button";
        clearButton.value = "Clear";
        clearButton.classList.add("button", "button-secondary");

        response = document.createElement("pre");
        response.id = "response";
        response.innerText = "";

        responseDiv = document.createElement("div");
        responseDiv.id = "response-container";
        responseDiv.appendChild(response);

        const instructionsElement = document.createElement("p");

        instructionsElement.id = "instructions";

        instructionsElement.innerHTML =
            "<strong>Instructions</strong>: Enter an address in the textbox to geocode or click on the map to reverse geocode.";

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(inputText);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(submitButton);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(clearButton);
        map.controls[google.maps.ControlPosition.LEFT_TOP].push(instructionsElement);
        map.controls[google.maps.ControlPosition.LEFT_TOP].push(responseDiv);

        marker = new google.maps.Marker({
            map,
        });

        map.addListener("click", (e) => {
            geocode({ location: e.latLng });
        });

        submitButton.addEventListener("click", () =>
            geocode({ address: inputText.value })
        );

        clearButton.addEventListener("click", () => {
            clear();
        });

        clear();
    }

    function clear() {
        marker.setMap(null);
        responseDiv.style.display = "none";
    }

    function geocode(request) {
        clear();

        geocoder
            .geocode(request)
            .then((result) => {
            const { results } = result;
            
            map.setCenter(results[0].geometry.location);
            marker.setPosition(results[0].geometry.location);
            marker.setMap(map);
            responseDiv.style.display = "block";
            response.innerText = JSON.stringify(result, null, 2);
            return JSON.stringify(results);
            })
            .then((results)=>{
                if(results)
                {
                    const result=JSON.parse(results)
                    console.log(result[0])
                    document.getElementsByName("Lang")[0].value=result[0].geometry.location.lng;
                    document.getElementsByName("Lat")[0].value=result[0].geometry.location.lat;
                    document.getElementsByName("Address")[0].value=result[0].address_components[0].long_name;
                }
            })
            .catch((e) => {
            alert("Geocode was not successful for the following reason: " + e);
            });
    }
</script>

<style>

#map {
  height: 100%;
}

input[type=text] {
  background-color: #fff;
  border: 0;
  border-radius: 2px;
  box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
  margin: 10px;
  padding: 0 0.5em;
  font: 400 18px Roboto, Arial, sans-serif;
  overflow: hidden;
  line-height: 40px;
  margin-right: 0;
  min-width: 25%;
}

input[type=button] {
  background-color: #fff;
  border: 0;
  border-radius: 2px;
  box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
  margin: 10px;
  padding: 0 0.5em;
  font: 400 18px Roboto, Arial, sans-serif;
  overflow: hidden;
  height: 40px;
  cursor: pointer;
  margin-left: 5px;
}
input[type=button]:hover {
  background: rgb(235, 235, 235);
}
input[type=button].button-primary {
  background-color: #1a73e8;
  color: white;
}
input[type=button].button-primary:hover {
  background-color: #1765cc;
}
input[type=button].button-secondary {
  background-color: white;
  color: #1a73e8;
}
input[type=button].button-secondary:hover {
  background-color: #d2e3fc;
}

#response-container {
  background-color: #fff;
  border: 0;
  border-radius: 2px;
  box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
  margin: 10px;
  padding: 0 0.5em;
  font: 400 18px Roboto, Arial, sans-serif;
  overflow: hidden;
  overflow: auto;
  max-height: 50%;
  max-width: 90%;
  background-color: rgba(255, 255, 255, 0.95);
  font-size: small;
}

#instructions {
  background-color: #fff;
  border: 0;
  border-radius: 2px;
  box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
  margin: 10px;
  padding: 0 0.5em;
  font: 400 18px Roboto, Arial, sans-serif;
  overflow: hidden;
  padding: 1rem;
  font-size: medium;
}
</style>

<h1><?= $tytul ?></h1>
<div id="map" style="width: 800px; height: 600px;"></div>
<div class="row">
    <div class="col-lg-4">
        <?= $this->form()->openTag($form) ?>

        <div class="form-group">
            <?= $this->formLabel($form->get('Lat')) ?>
            <?= $this->formText($form->get('Lat')) ?>
            <?= $this->formElementErrors($form->get('Lat'), ['class' => 'help-block']) ?>
        </div>
        <div class="form-group">
            <?= $this->formLabel($form->get('Lang')) ?>
            <?= $this->formText($form->get('Lang')) ?>
            <?= $this->formElementErrors($form->get('Lang'), ['class' => 'help-block']) ?>
        </div>
        <div class="form-group">
            <?= $this->formLabel($form->get('Address')) ?>
            <?= $this->formText($form->get('Address')) ?>
            <?= $this->formElementErrors($form->get('Address'), ['class' => 'help-block']) ?>
        </div>
        <div class="form-group">
            <?= $this->formLabel($form->get('Description')) ?>
            <?= $this->formTextarea($form->get('Description')) ?>
            <?= $this->formElementErrors($form->get('Description'), ['class' => 'help-block']) ?>
        </div>
        <?= $this->formSubmit($form->get('zapisz')) ?>

        <?= $this->form()->closeTag($form) ?>
    </div>
</div>